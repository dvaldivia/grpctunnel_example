// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: time_teller.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimeTellerClient is the client API for TimeTeller service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimeTellerClient interface {
	WhatTimeIsIt(ctx context.Context, in *TellRequest, opts ...grpc.CallOption) (*TimeResponse, error)
}

type timeTellerClient struct {
	cc grpc.ClientConnInterface
}

func NewTimeTellerClient(cc grpc.ClientConnInterface) TimeTellerClient {
	return &timeTellerClient{cc}
}

func (c *timeTellerClient) WhatTimeIsIt(ctx context.Context, in *TellRequest, opts ...grpc.CallOption) (*TimeResponse, error) {
	out := new(TimeResponse)
	err := c.cc.Invoke(ctx, "/example.TimeTeller/WhatTimeIsIt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimeTellerServer is the server API for TimeTeller service.
// All implementations must embed UnimplementedTimeTellerServer
// for forward compatibility
type TimeTellerServer interface {
	WhatTimeIsIt(context.Context, *TellRequest) (*TimeResponse, error)
	mustEmbedUnimplementedTimeTellerServer()
}

// UnimplementedTimeTellerServer must be embedded to have forward compatible implementations.
type UnimplementedTimeTellerServer struct {
}

func (UnimplementedTimeTellerServer) WhatTimeIsIt(context.Context, *TellRequest) (*TimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WhatTimeIsIt not implemented")
}
func (UnimplementedTimeTellerServer) mustEmbedUnimplementedTimeTellerServer() {}

// UnsafeTimeTellerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimeTellerServer will
// result in compilation errors.
type UnsafeTimeTellerServer interface {
	mustEmbedUnimplementedTimeTellerServer()
}

func RegisterTimeTellerServer(s grpc.ServiceRegistrar, srv TimeTellerServer) {
	s.RegisterService(&TimeTeller_ServiceDesc, srv)
}

func _TimeTeller_WhatTimeIsIt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimeTellerServer).WhatTimeIsIt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.TimeTeller/WhatTimeIsIt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimeTellerServer).WhatTimeIsIt(ctx, req.(*TellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TimeTeller_ServiceDesc is the grpc.ServiceDesc for TimeTeller service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TimeTeller_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "example.TimeTeller",
	HandlerType: (*TimeTellerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WhatTimeIsIt",
			Handler:    _TimeTeller_WhatTimeIsIt_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "time_teller.proto",
}
